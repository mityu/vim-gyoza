" call themis#log(readfile(expand('<sfile>'))) | finish
let s:assert = themis#helper('assert')
call themis#helper('command').with(s:assert)
call themis#func_alias(s:assert)

let s:scope = themis#helper('scope')
let s:F = s:scope.funcs('autoload/gyoza/observer.vim')

Describe Helper program test
  Before all
    call test_override('char_avail', 1)
  End

  After all
    call test_override('char_avail', 0)
  End

  Before each
    %bwipeout!
  End

  Context validations for testing environment
    After all
      augroup test-gyoza
        autocmd!
      augroup END
      augroup! test-gyoza
    End

    Before each
      augroup test-gyoza
        autocmd!
      augroup END
    End

    It can handle TextChangedI event.
      autocmd test-gyoza TextChangedI * call append('$', 'appended')
      Feedkeys ia<Cmd>Assert Equals(GetAllLines(), ['a', 'appended'])<CR><ESC>
    End

    It can handle TextChanged event.
      Skip TextChanged autocommand seems not triggered when testing.
      let g:textChangedHandled = v:false
      autocmd test-gyoza TextChanged * let g:textChangedHandled = v:true
      call setline(1, 'aaa')
      Assert True(g:textChangedHandled)
      unlet g:textChangedHandled
    End
  End

  Context "scripter" helper module
    It's feedkey() can stay insert-mode and leave it later.
      let lines =<< trim END
      a
      appended
      END

      augroup test-gyoza
        autocmd!
        autocmd TextChangedI * call append('$', 'appended')
      augroup END

      call NewScripter()
        \.call({-> s:assert.equals(GetAllLines(), [''])})
        \.feedkeys('ia')
        \.call({-> s:assert.equals(mode(), 'i')})
        \.call({-> s:assert.equals(GetAllLines(), lines)})
        \.feedkeys('<ESC>')
        \.call({-> s:assert.equals(mode(), 'n')})
        \.call({-> s:assert.equals(GetAllLines(), lines)})
        \.run()

      autocmd! test-gyoza
      augroup! test-gyoza
    End

    It's .feedkeys_remap() consider user defined mappings.
      inoremap @ (at)
      call NewScripter()
        \.feedkeys('ia')
        \.call({-> s:assert.equals(mode(), 'i')})
        \.call({-> s:assert.equals(getline('.'), 'a')})
        \.feedkeys_remap('b')
        \.call({-> s:assert.equals(mode(), 'i')})
        \.call({-> s:assert.equals(getline('.'), 'ab')})
        \.feedkeys_remap('@')
        \.call({-> s:assert.equals(mode(), 'i')})
        \.call({-> s:assert.equals(getline('.'), 'ab(at)')})
        \.feedkeys('<ESC>')
        \.run()
      iunmap @
    End

  End

End


Describe Observer class
  Before all
    let g:logs = []
    let Callback = {-> add(g:logs, GetCurpos())}
    call gyoza#observer#set_callback_on_trigger_applicant(Callback)
    call test_override('char_avail', 1)
  End

  After all
    unlet Callback
    unlet g:logs
    call gyoza#observer#set_callback_on_trigger_applicant(v:none)
    call test_override('char_avail', 0)
  End

  Before each
    %bwipeout!
    let g:logs = []
    call gyoza#observer#enable()
  End

  It notifies nothing when no new line appeared.
    Feedkeys iabc<ESC>
    Assert Equals(g:logs, [])
  End

  It notifies when new line appears.
    Assert Equals(GetCurpos(), [1, 1])
    Feedkeys i<CR><ESC>
    Assert Equals(GetCurpos(), [2, 1])
    Assert Equals(g:logs, [[2, 1]])
  End

  It notifies nothing when disabled.
    call gyoza#observer#disable()
    Assert Equals(GetCurpos(), [1, 1])
    Feedkeys i<CR><ESC>
    Assert Equals(GetCurpos(), [2, 1])
    Assert Equals(g:logs, [])
  End

  It's cursor position includes indentation.
    set smartindent
    call setline(1, '{')
    call NewScripter()
      \.feedkeys('A<CR>')
      \.call({-> s:assert.equals(getline(1, '$'), ['{', "\t"])})
      \.call({-> s:assert.equals(GetCurpos(), [2, 2])})
      \.run()
    set smartindent&
  End

  It callbacks newline when entering insert mode with 'o'.
    Feedkeys o111<ESC>
    Assert Equals(g:logs, [[2, 1]])
    Feedkeys o222<ESC>o333<ESC>
    Assert Equals(g:logs, [[2, 1], [3, 1], [4, 1]])
  End

  It callbacks newline when entering insert mode with 'O'.
    let initial =<< trim END
    aaa
    bbb
    ccc
    END
    let lines =<< trim END
    aaa
    bbb
    111
    ccc
    END
    call setline(1, initial)
    Feedkeys GO111<ESC>
    Assert Equals(getline(1, '$'), lines)
    Assert Equals(g:logs, [[3, 1]])
  End

  It doesn't notify even when buffer lines is changed by setline().
    Skip TextChanged seems not triggered when testing.
    call setline(1, ['aaa', 'bbb', 'ccc'])
    Feedkeys ggIa<ESC>
    Assert Equals(g:logs, [])
  End

  It doesn't notify after adding buffer lines with 'p'.
    Skip TextChanged seems not triggered when testing.
    let @a = "\nbbbbbb"
    normal! "ap
    Assert Equals(getline(1, '$'), ['', 'bbbbbb'])
    Feedkeys ggIa<ESC>
    Assert Equals(g:logs, [])
    let @a = ''
  End

  It notifies newline even if it's just after deletebufline().
    call setline(1, ['aaa', 'bbb', 'ccc', 'ddd'])
    $-1,$ delete _
    Feedkeys ggo<ESC>
    Assert Equals(g:logs, [[2, 1]])
  End

  It notify nothing in cmdwin.
    Feedkeys q:o<ESC><C-w>q
    Assert Equals(g:logs, [])
  End

End
