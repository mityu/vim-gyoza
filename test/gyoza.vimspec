" call themis#log(readfile(expand('<sfile>'))) | finish
let s:assert = themis#helper('assert')
call themis#helper('command').with(s:assert)
call themis#func_alias(s:assert)

let s:F = ScriptFuncs('autoload/gyoza.vim')

Describe Helper program test
  Before all
    call test_override('char_avail', 1)

    function GetAllLines() abort
      return getline(1, '$')
    endfunction
  End

  After all
    call test_override('char_avail', 0)
    delfunction GetAllLines
  End

  Before each
    %bwipeout!
  End

  Context validations for testing environment
    After all
      augroup test-gyoza
        autocmd!
      augroup END
      augroup! test-gyoza
    End

    Before each
      augroup test-gyoza
        autocmd!
      augroup END
    End

    It can handle TextChangedI event.
      autocmd test-gyoza TextChangedI * call append('$', 'appended')
      Feedkeys ia<Cmd>Assert Equals(GetAllLines(), ['a', 'appended'])<CR><ESC>
    End

    It can handle TextChanged event.
      Skip TextChanged autocommand seems not triggered when testing.
      let g:textChangedHandled = v:false
      autocmd test-gyoza TextChanged * let g:textChangedHandled = v:true
      call setline(1, 'aaa')
      Assert True(g:textChangedHandled)
      unlet g:textChangedHandled
    End
  End

  Context "scripter" helper module
    It's feedkey() can stay insert-mode and leave it later.
      let lines =<< trim END
      a
      appended
      END

      augroup test-gyoza
        autocmd!
        autocmd TextChangedI * call append('$', 'appended')
      augroup END

      call NewScripter()
        \.call({-> s:assert.equals(GetAllLines(), [''])})
        \.feedkeys('ia')
        \.call({-> s:assert.equals(mode(), 'i')})
        \.call({-> s:assert.equals(GetAllLines(), lines)})
        \.feedkeys('<ESC>')
        \.call({-> s:assert.equals(mode(), 'n')})
        \.call({-> s:assert.equals(GetAllLines(), lines)})
        \.run()

      autocmd! test-gyoza
      augroup! test-gyoza
    End

    It's .feedkeys_remap() consider user defined mappings.
      inoremap @ (at)
      call NewScripter()
        \.feedkeys('ia')
        \.call({-> s:assert.equals(mode(), 'i')})
        \.call({-> s:assert.equals(getline('.'), 'a')})
        \.feedkeys_remap('b')
        \.call({-> s:assert.equals(mode(), 'i')})
        \.call({-> s:assert.equals(getline('.'), 'ab')})
        \.feedkeys_remap('@')
        \.call({-> s:assert.equals(mode(), 'i')})
        \.call({-> s:assert.equals(getline('.'), 'ab(at)')})
        \.feedkeys('<ESC>')
        \.run()
      iunmap @
    End

  End

End

Describe Utility functions
  Context GetOneIndent()
    Before all
      let GetOneIndent = s:F.GetOneIndent
    End

    After all
      set expandtab& smarttab& shiftwidth& tabstop&
      unlet GetOneIndent
    End

    Before each
      set expandtab& smarttab& shiftwidth& tabstop&
    End

    It returns a <Tab> when 'expandtab' is off.
      set noexpandtab
      Assert Equals(GetOneIndent(), "\t")
    End

    It returns a spaces when 'expandtab' is on.
      set expandtab shiftwidth=2
      Assert Equals(GetOneIndent(), '  ')
      set shiftwidth=4
      Assert Equals(GetOneIndent(), '    ')
    End

    It returns a spaces when display length of tab is different from shiftwidth().
      set tabstop=4 shiftwidth=2
      Assert Equals(GetOneIndent(), '  ')
    End

  End

End

" FIXME: It will make tests fail to use :call instead of :vim9 when calling
" member functions.
Describe Config class
  Before all
    let GetInstance = {-> s:F.GetClasses().Config()}
    let PickPatterns = {rules -> map(deepcopy(rules), 'v:val.pattern')}
    let PickPairs = {rules -> map(deepcopy(rules), 'v:val.pair')}
  End

  After all
    unlet GetInstance
    unlet PickPatterns
  End

  It has no rules at first.
    let c = GetInstance()
    Assert Equals(c.rules, [])
  End

  It can add a rule.
    let c = GetInstance()
    " Test will fail when use :call instead of :vim9
    vim9 c.AddRule('if', 'endif')
    Assert LengthOf(c.rules, 1)
    Assert Equals(PickPatterns(c.rules), ['if'])
  End

  It can add some rules.
    let c = GetInstance()
    " Test will fail when use :call instead of :vim9
    vim9 c.AddRule('if-1', 'endif')
    Assert LengthOf(c.rules, 1)
    vim9 c.AddRule('if-2', 'endif')
    Assert LengthOf(c.rules, 2)
    Assert Equals(PickPatterns(c.rules), ['if-1', 'if-2'])
  End

  It clears rules.
    let c = GetInstance()
    vim9 c.AddRule('...', '...')
    vim9 c.ClearRule()
    Assert Equals(c.rules, [])
  End

  " It can overwrite existing rule by giving rule with same pattern.
  "   let c = GetInstance()
  "   vim9 c.AddRule('if', 'endif-1')
  "   vim9 c.AddRule('if', 'endif-2')
  "   Assert LengthOf(c.rules, 1)
  "   Assert Equals(PickPatterns(c.rules), ['if'])
  "   Assert Equals(c.rules[0].pair, 'endif-2')
  " End

  It can hold rules with same pattern.
    let c = GetInstance()
    vim9 c.AddRule('if', 'endif-1')
    vim9 c.AddRule('if', 'endif-2')
    Assert LengthOf(c.rules, 2)
    Assert Equals(PickPatterns(c.rules), ['if', 'if'])
    Assert Equals(PickPairs(c.rules), ['endif-1', 'endif-2'])
  End

  It can import rules from other Config object.
    let c1 = GetInstance()
    let c2 = GetInstance()
    vim9 c1.AddRule('c1', 'c1-pair')
    vim9 c1.AddRule('if', 'if-pair-1')
    vim9 c2.AddRule('c2', 'c2-pair')
    vim9 c2.AddRule('if', 'if-pair-2')
    vim9 c1.ExtendRules(c2)
    Assert LengthOf(c1.rules, 4)
    Assert Equals(PickPatterns(c1.rules), ['c1', 'if', 'c2', 'if'])
    Assert Equals(PickPairs(c1.rules), ['c1-pair', 'if-pair-1', 'c2-pair', 'if-pair-2'])
    Assert LengthOf(c2.rules, 2)
    Assert Equals(PickPatterns(c2.rules), ['c2', 'if'])
    Assert Equals(PickPairs(c2.rules), ['c2-pair', 'if-pair-2'])
  End

  It's ClearRule() does not affect distributed rules.
    let c1 = GetInstance()
    let c2 = GetInstance()
    vim9 c1.AddRule('c1', 'c1-pair')
    vim9 c2.AddRule('c2', 'c2-pair')
    vim9 c1.ExtendRules(c2)
    Assert LengthOf(c1.rules, 2)
    Assert LengthOf(c2.rules, 1)
    vim9 c2.ClearRule()
    Assert LengthOf(c1.rules, 2)
    Assert Equals(PickPatterns(c1.rules), ['c1', 'c2'])
    Assert LengthOf(c2.rules, 0)
  End

End

Describe Observer class
  Before all
    let g:logs = []
    let GetCurpos = {-> getcurpos()[1 : 2]}
    let Callback = {-> add(g:logs, GetCurpos())}
    call test_override('char_avail', 1)
  End

  After all
    unlet GetCurpos
    unlet Callback
    unlet g:logs
    call test_override('char_avail', 0)
  End

  Before each
    %bwipeout!
    let g:logs = []
    let Observer = s:F.GetClasses().Observer(Callback)
    call Observer.Enable()
  End

  After each
    call Observer.Disable()
    unlet Observer
  End

  It notifies nothing when no new line appeared.
    Feedkeys iabc<ESC>
    Assert Equals(g:logs, [])
  End

  It notifies when new line appears.
    Assert Equals(GetCurpos(), [1, 1])
    Feedkeys i<CR><ESC>
    Assert Equals(GetCurpos(), [2, 1])
    Assert Equals(g:logs, [[2, 1]])
  End

  It notifies nothing when disabled.
    call Observer.Disable()
    Assert Equals(GetCurpos(), [1, 1])
    Feedkeys i<CR><ESC>
    Assert Equals(GetCurpos(), [2, 1])
    Assert Equals(g:logs, [])
  End

  It's cursor position includes indentation.
    set smartindent
    call setline(1, '{')
    call NewScripter()
      \.feedkeys('A<CR>')
      \.call({-> s:assert.equals(getline(1, '$'), ['{', "\t"])})
      \.call({-> s:assert.equals(GetCurpos(), [2, 2])})
      \.run()
    set smartindent&
  End

  It callbacks newline when entering insert mode with 'o'.
    Feedkeys o111<ESC>
    Assert Equals(g:logs, [[2, 1]])
    Feedkeys o222<ESC>o333<ESC>
    Assert Equals(g:logs, [[2, 1], [3, 1], [4, 1]])
  End

  It callbacks newline when entering insert mode with 'O'.
    let initial =<< trim END
    aaa
    bbb
    ccc
    END
    let lines =<< trim END
    aaa
    bbb
    111
    ccc
    END
    call setline(1, initial)
    Feedkeys GO111<ESC>
    Assert Equals(getline(1, '$'), lines)
    Assert Equals(g:logs, [[3, 1]])
  End

  It doesn't notify even when buffer lines is changed by setline().
    Skip TextChanged seems not triggered when testing.
    call setline(1, ['aaa', 'bbb', 'ccc'])
    Feedkeys ggIa<ESC>
    Assert Equals(g:logs, [])
  End

  It doesn't notify after adding buffer lines with 'p'.
    Skip TextChanged seems not triggered when testing.
    let @a = "\nbbbbbb"
    normal! "ap
    Assert Equals(getline(1, '$'), ['', 'bbbbbb'])
    Feedkeys ggIa<ESC>
    Assert Equals(g:logs, [])
    let @a = ''
  End

  It notifies newline even if it's just after deletebufline().
    call setline(1, ['aaa', 'bbb', 'ccc', 'ddd'])
    $-1,$ delete _
    Feedkeys ggo<ESC>
    Assert Equals(g:logs, [[2, 1]])
  End

  It notify nothing in cmdwin.
    Feedkeys q:o<ESC><C-w>q
    Assert Equals(g:logs, [])
  End

End

Describe Applier class
  Before all
    call test_override('char_avail', 1)
    let GetAllLines = {-> getline(1, '$')}
    let GetCurpos = {-> getcurpos()[1 : 2]}
    let NewConfig = {-> s:F.GetClasses().Config()}
    let NewApplier = {-> s:F.GetClasses().Applier()}
    filetype indent on
  End

  After all
    %bwipeout!
    call test_override('char_avail', 0)
    unlet GetAllLines
    unlet GetCurpos
    unlet NewConfig
    unlet NewApplier
    set expandtab& smarttab& shiftwidth& tabstop&
    filetype indent off
  End

  Before each
    %bwipeout!
    set expandtab& smarttab& shiftwidth& tabstop&
    set filetype=vim
  End

  It is a validation.
    " Check for the auto indentation.
    Feedkeys iif foo<CR>aaa<CR>endif<ESC>
    Assert Equals(GetAllLines(), ['if foo', "\taaa", 'endif'])
  End

  It completes closing pair (no indentation).
    let rules = NewConfig().AddRule('^\s*if\>', 'endif').rules
    call NewScripter()
      \.feedkeys('iif aaa<CR>')
      \.call({-> NewApplier().TriggerApplication(rules)})
      \.feedkeys('')
      \.call({-> s:assert.equals(GetAllLines(), ['if aaa', "\t", 'endif'])})
      \.call({-> s:assert.equals(GetCurpos(), [2, 2])})
      \.run()
  End

  It completes closing pair (with indentation).
    let rules = NewConfig().AddRule('^\s*if\>', 'endif').rules
    call NewScripter()
      \.feedkeys('i<Tab>if aaa<CR>')
      \.call({-> NewApplier().TriggerApplication(rules)})
      \.feedkeys('')
      \.call({-> s:assert.equals(GetAllLines(), ["\tif aaa", "\t\t", "\tendif"])})
      \.call({-> s:assert.equals(GetCurpos(), [2, 3])})
      \.run()
  End

  It does not complete pair if next line has deeper indentation.
    let rules = NewConfig().AddRule('^\s*if\>', 'endif').rules
    call setline(1, ['if aaa', "\tfoo"])
    call NewScripter()
      \.feedkeys('ggo')
      \.call({-> NewApplier().TriggerApplication(rules)})
      \.feedkeys('')
      \.call({-> s:assert.equals(GetAllLines(), ['if aaa', "\t", "\tfoo"])})
      \.call({-> s:assert.equals(GetCurpos(), [2, 2])})
      \.run()
  End

  It does not complete pair if there's already the pair.
    let rules = NewConfig().AddRule('^\s*if\>', 'endif').rules
    call setline(1, ['if', 'endif'])
    call NewScripter()
      \.feedkeys('ggo')
      \.call({-> NewApplier().TriggerApplication(rules)})
      \.feedkeys('')
      \.call({-> s:assert.equals(GetAllLines(), ['if', "\t", 'endif'])})
      \.call({-> s:assert.equals(GetCurpos(), [2, 2])})
      \.run()
  End

End
